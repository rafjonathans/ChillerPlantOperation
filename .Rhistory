log1p(1)
log1p(0)
log(0)
rm(list = ls())
library(tidyverse)
library(lubridate)
library(plotly)
library(egg)
library(caret)
library(e1071)
library(ggcorrplot)
start_time <- Sys.time()
# Get the dataset
## First step is to select working directory where the dataset stored
total_file <- list.files(pattern = c("Trend", ".csv"))
datalist <- list()
for (x in 1:length(total_file)) {
# Read dataset
datalist[[x]] <- read.csv(total_file[x], sep = ";", dec = ",", header = FALSE)
# Split column considering the category in first column
datalist[[x]] <- split(datalist[[x]], datalist[[x]][1])
# Reduce timestamp
for (y in 1:length(datalist[[x]])) {
datalist[[x]][[y]] <- aggregate(datalist[[x]][[y]]$V3,
list(hour = ymd_hms(cut(as.POSIXct(datalist[[x]][[y]]$V2, format = c("%e/%m/%Y %H:%M:%S")), "hour"))),
mean, )
}
}
## Merge similar variable
Variable <- list()
for (x in 1:length(datalist)){
for (y in 1:length(datalist[[1]])) {
if (x == 1) {
Variable[[y]] <- datalist[[x]][[y]]
}
else {
Variable[[y]] <- add_row(Variable[[y]],
datalist[[x]][[y]])
}
}
}
## Remove duplicate hour
for (x in 1:length(Variable)){
Variable[[x]] <- distinct(Variable[[x]], hour, .keep_all = T)
}
## Merge variable in a list into one table
Variable <- reduce(Variable, left_join, by = "hour")
colnames(Variable) <- c("Time", "OAHum", "OADB", "OAWB", "WCC5-EIT",
"WCC5-EOT", "Variable-1", 'Variable-2', "HVAC_GPM", "HVAC_CHWdP",
"WCC3-RLA", "WCC4-RLA", "WCC5-RLA", "WCC5-CIT", "WCC4-CIT",
"WCC3-CIT", "HVAC-CTHZ", "PROC-CTHZ", "PROC-CHWRT", "PROC-CHWST",
"HVAC-CHWRT", "HVAC-CHWST", "WCC3-EFF", "WCC4-EFF", "WCC5 EFF",
"Variable-3", "Variable-4", "WCC3-COT", "WCC4-COT", "WCC5-COT",
"WCC3-EOT", "WCC4-EOT", 'WCC3-EIT', 'WCC4-EIT', 'DailyTRH')
# Missing value
## Impute missing logging time
timePeriod <- data.frame(Time = seq(min(Variable$Time), max(Variable$Time), by="hour"))
Variable <- left_join(timePeriod, Variable,"Time")
## Explore missing value
valplot <- function(x, value){
if (is.na(value)) {
temp <- is.na(x)
}
else {
temp <- (x == value)
}
temp %>%
data.frame() %>%
rowid_to_column(var = "X") %>%
gather(key = "Y", value = "Z", -1) %>%
ggplot(aes(x = X,
y = Y,
fill = Z)) +
geom_tile() +
labs(x = "Missing Position",
y = "Variables",
title = "Missing Value Mapping") +
theme(panel.background = element_blank(),
legend.position = "top",
plot.title = element_text(hjust = 0.5))
}
plot_missmap <- valplot(Variable, NA)
plot_missmap
## Drop DailyTRH column due to high missing value
Variable <- select(Variable, -c("DailyTRH"))
head(Variable)
## Check other variable
missVar <- Variable %>%
is.na() %>%
colSums() > 0
missVar <- names(Variable[,missVar])
missVar
# View(Variable[rowSums(is.na(Variable))>0,])
## Impute 0 to missing value and negative value
### As seen in View(), row with missing value also have 0 values at least in one column"
Variable <- replace(Variable, is.na(Variable), 0)
## Negative value is found
Variable <- replace(Variable, Variable < 0, 0)
# Outliers
## Outliers on ambient environment condition will be replaced by new values
## Outliers on facility operational condition will be handled by standardization.
## Keeping the outlier information but make the calculation algorithm less sensitive to that
## Explore OA outliers
OA_var <- c("Time", "OAHum","OADB", "OAWB")
OAHum_plot <- ggplot(Variable) +
geom_boxplot(aes(y = OAHum)) +
labs(x= "OA Humidity",
y= "Relative Humidity [%]") +
scale_y_continuous(expand = c(0,0),limits = c(0,120), breaks = seq(0,120,20)) +
scale_x_continuous(expand = c(0,0.1)) +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
panel.grid.major.y = element_line(colour = "grey"),
plot.title = element_text(hjust = 0.5, margin=margin(0,0,30,0)))
OADB_plot <- ggplot(Variable) +
geom_boxplot(aes(y = OADB)) +
labs(x= "OA Dry Bulb",
y= "Dry Bulb Temperature [C]") +
scale_y_continuous(expand = c(0,0),limits = c(0,60), breaks = seq(0,60,10)) +
scale_x_continuous(expand = c(0,0.1)) +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
panel.grid.major.y = element_line(colour = "grey"),
plot.title = element_text(hjust = 0.5, margin=margin(0,0,30,0)))
OAWB_plot <- ggplot(Variable) +
geom_boxplot(aes(y = OAWB)) +
labs(x= "OA Wet Bulb",
y= "Wet Bulb Temperature [C]",
title = "Outdoor Air Condition") +
scale_y_continuous(expand = c(0,0),limits = c(0,60), breaks = seq(0,60,10)) +
scale_x_continuous(expand = c(0,0.1)) +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
panel.grid.major.y = element_line(colour = "grey"),
plot.title = element_text(hjust = 0.5, margin=margin(0,0,30,0)))
OA_plot <- ggarrange(OADB_plot, OAWB_plot, OAHum_plot, nrow = 1, ncol = 3)
OA_stats <- data.frame(OAHum= boxplot.stats(Variable$OAHum)$stats,
OADB= boxplot.stats(Variable$OADB)$stats,
OAWB= boxplot.stats(Variable$OAWB)$stats)
Variable$OADB[which(Variable$OADB < OA_stats[1,which(names(OA_stats) == 'OADB')])] <- OA_stats[1,which(names(OA_stats) == 'OADB')]
Variable$OADB[which(Variable$OADB > OA_stats[5,which(names(OA_stats) == 'OADB')])] <- OA_stats[5,which(names(OA_stats) == 'OADB')]
Variable$OAWB[which(Variable$OAWB < OA_stats[1,which(names(OA_stats) == 'OAWB')])] <- OA_stats[1,which(names(OA_stats) == 'OAWB')]
Variable$OAWB[which(Variable$OAWB > OA_stats[5,which(names(OA_stats) == 'OAWB')])] <- OA_stats[5,which(names(OA_stats) == 'OAWB')]
## Replace outliers with Q1 and Q3 on OAHum
Variable$OAHum[which(Variable$OAHum < OA_stats[1,which(names(OA_stats) == 'OAHum')])] <- OA_stats[1,which(names(OA_stats) == 'OAHum')]
Variable$OAHum[which(Variable$OAHum > OA_stats[4,which(names(OA_stats) == 'OAHum')])] <- OA_stats[4,which(names(OA_stats) == 'OAHum')]
## As target variable is total chiller power consumption we need to add WCC
head(Variable$`WCC3-RLA` + Variable$`WCC4-RLA` + Variable$`WCC5-RLA`)
## As target variable is total chiller power consumption we need to add WCC
is(Variable$`WCC3-RLA` + Variable$`WCC4-RLA` + Variable$`WCC5-RLA`)
colnames(Variable) <- c("Time", "OAHum", "OADB", "OAWB", "WCC5_EIT",
"WCC5_EOT", "Variable_1", 'Variable_2', "HVAC_GPM", "HVAC_CHWdP",
"WCC3_RLA", "WCC4_RLA", "WCC5_RLA", "WCC5_CIT", "WCC4_CIT",
"WCC3_CIT", "HVAC_CTHZ", "PROC_CTHZ", "PROC_CHWRT", "PROC_CHWST",
"HVAC_CHWRT", "HVAC_CHWST", "WCC3_EFF", "WCC4_EFF", "WCC5 EFF",
"Variable_3", "Variable_4", "WCC3_COT", "WCC4_COT", "WCC5_COT",
"WCC3_EOT", "WCC4_EOT", 'WCC3_EIT', 'WCC4_EIT', 'DailyTRH')
colnames(Variable) <- c("Time", "OAHum", "OADB", "OAWB", "WCC5_EIT",
"WCC5_EOT", "Variable_1", 'Variable_2', "HVAC_GPM", "HVAC_CHWdP",
"WCC3_RLA", "WCC4_RLA", "WCC5_RLA", "WCC5_CIT", "WCC4_CIT",
"WCC3_CIT", "HVAC_CTHZ", "PROC_CTHZ", "PROC_CHWRT", "PROC_CHWST",
"HVAC_CHWRT", "HVAC_CHWST", "WCC3_EFF", "WCC4_EFF", "WCC5 EFF",
"Variable_3", "Variable_4", "WCC3_COT", "WCC4_COT", "WCC5_COT",
"WCC3_EOT", "WCC4_EOT", 'WCC3_EIT', 'WCC4_EIT')
str(Variable)
## As target variable is total chiller power consumption we need to add WCC
Variable$Total_RLA <- (Variable$WCC3_RLA + Variable$WCC4_RLA + Variable$WCC5_RLA)
str(Variable)
valplot(Variable)
valplot(Variable, 0)
rowSums(Variable == 0)
boxplot(rowSums(Variable == 0))
boxplot.stats(rowSums(Variable == 0))
## Rows with too many 0 values should be deleted
rowZero <- boxplot.stats(rowSums(Variable == 0))
rowZero$stats[5]
rowZero$stats
rowSums(Variable == 0)
rowSums(Variable == 0) > rowZero$stats[5]
rowSums(Variable == 0) > rowZero$stats[5]
Variable[which(rowSums(Variable == 0) > rowZero$stats[5]),]
nrow(Variable[which(rowSums(Variable == 0) > rowZero$stats[5]),])
nrow(VVariable)
nrow(Variable)
(rowSums(Variable == 0) > rowZero$stats[5])
sum(rowSums(Variable == 0) > rowZero$stats[5])
deletedRows <- sum(rowSums(Variable == 0) > rowZero$stats[5]) / nrow(Variable)
deletedRows
valplot(Variable, 0)+
geom_hline(yintercept = ymd_hms(20160101000000))
valplot(Variable, 0)+
geom_vline(yintercept = ymd_hms(20160101000000))
valplot(Variable, 0)+
geom_vline(xintercept = ymd_hms(20160101000000))
Variable$Time == ymd_hms(2016010100000)
Variable$Time
sum(Variable$Time == ymd_hms(2016010100000))
# Variable$Time ==
ymd_hms(2016010100000)
# Variable$Time ==
ymd_hms(20160101000000)
Variable$Time == ymd_hms(20160101000000)
match(Variable$Time, ymd_hms(20160101000000))
match(Variable$Time, ymd_hms(20160101000000))
Variable$Time == ymd_hms(20160101000000)
which(Variable$Time == ymd_hms(20160101000000))
valplot(Variable, 0)+
geom_vline(xintercept = which(Variable$Time == ymd_hms(20160101000000)))
valplot(Variable, 0)+
geom_vline(xintercept = c(which(Variable$Time == ymd_hms(20160101000000)),
which(Variable$Time == ymd_hms(20170101000000)),
which(Variable$Time == ymd_hms(20180101000000))))
deletedRows <- sum(rowSums(Variable == 0) > rowZero$stats[5]) / nrow(Variable)
deletedRows
(Variable[which(rowSums(Variable == 0) > rowZero$stats[5]),])
(Variable[-which(rowSums(Variable == 0) > rowZero$stats[5]),])
nrow(Variable[-which(rowSums(Variable == 0) > rowZero$stats[5]),])
nrow(Variable)
(Variable[-which(rowSums(Variable == 0) > rowZero$stats[5]),])
rowZero$stats
rowZero$stats
rowZero
colSums(Variable == 0)
colSums(Variable == 0) / nrow(Variable)
colSums(Variable == 0) / nrow(Variable) > 0.8
sum(colSums(Variable == 0) / nrow(Variable) > 0.8)
sum(colSums(Variable == 0) / nrow(Variable) > 0.7)
(colSums(Variable == 0) / nrow(Variable) > 0.7)
## Manage too many 0 values
### In column
(colSums(Variable == 0) / nrow(Variable) > 0.7)
## Manage too many 0 values
### In column
(colSums(Variable == 0) / nrow(Variable))
## Manage too many 0 values
### In column
data.frame(colSums(Variable == 0) / nrow(Variable))
## Manage too many 0 values
### In column
(colSums(Variable == 0) / nrow(Variable)) %>%
data.frame() %>%
order(decreasing = T)
## Manage too many 0 values
### In column
colZero <- (colSums(Variable == 0) / nrow(Variable)) %>%
data.frame()
colZero
colZero[order(decreasing = T),]
colZero[order(decreasing = T)]
colZero[order(decreasing = T),]
colZero
## Manage too many 0 values
### In column
colZero <- (colSums(Variable == 0) / nrow(Variable)) %>%
data.frame(Data = .)
colZero
order(decreasing = T)
order(colZero, decreasing = T)
colZero[order(colZero, decreasing = T)]
colZero[order(colZero, decreasing = T),]
colZero[c(1,2,3),]
colZero[c(1,2,3)]
colZero[c(1,2,3)]
colZero[1:3]
colZero[1:3,]
colZero[]
colZero[order(colZero, decreasing = T)]
colZero[order(colZero, decreasing = T),]
order(colZero, decreasing = T)
colZero[order(colZero, decreasing = T),]
colZero[1:3,]
colZero[1:7,]
colZero[1:7,1]
colZero[1:7,:]
colZero[1:7,0]
colZero[1:7,1]
colZero[1:7,1:]
colZero[1:7,1:1]
colZero[1:7,1:2]
colZero[1:7]
colZero[1:7,]
data.frame(colZero[1:7,])
colZero[1:7,]
order(colZero, decreasing = T)
colZero
sort(colZero)
sort(colZero,decreasing = T)
order(colZero,decreasing = T)
colSums(Variable == 0) / nrow(Variable)
colSums(Variable == 0) / nrow(Variable) %>%
order(decreasing = T)
colSums(Variable == 0) / nrow(Variable) %>%
order(decreasing = F)
colSums(Variable == 0) / nrow(Variable) %>%
data.frame() %>%
order(decreasing = F)
## Manage too many 0 values
### In column
colZero <- (colSums(Variable == 0) / nrow(Variable)) %>%
data.frame(Data = .)
order(colZero,decreasing = T)
order(colZero,decreasing = T)
colZero[order(colZero,decreasing = T)]
colZero[order(colZero,decreasing = T),]
colnames(colZero[order(colZero,decreasing = T),])
colnames(colZero)[order(colZero,decreasing = T)]
colnames(colZero)[1]
rownames(colZero)[1]
rownames(colZero)[order(colZero,decreasing = T)]
colZero <- data.frame(colZero[order(colZero,decreasing = T),],
row.names = rownames(colZero)[order(colZero,decreasing = T)])
colZero
colZero <- data.frame(Data = colZero[order(colZero,decreasing = T),],
row.names = rownames(colZero)[order(colZero,decreasing = T)])
colZero
## Manage too many 0 values
### In column
colZero <- colSums(Variable == 0) / nrow(Variable) %>%
data.frame(Data = .)
colSums(Variable == 0) / nrow(Variable)
is(colSums(Variable == 0) / nrow(Variable))
(colSums(Variable == 0) / nrow(Variable))[1]
(colSums(Variable == 0) / nrow(Variable)) %>% order()
colZero <- data.frame(Data = colZero[order(colZero,decreasing = T),],
row.names = rownames(colZero)[order(colZero,decreasing = T)])
(colSums(Variable == 0) / nrow(Variable)) %>% order()
colZero <- data.frame(Data = colZero[order(colZero,decreasing = T),],
row.names = rownames(colZero)[order(colZero,decreasing = T)])
colZero
colZero <- data.frame(Data = colZero[order(colZero,decreasing = T),],
row.names = rownames(colZero)[order(colZero,decreasing = T)])
## Explore missing value
valplot <- function(x, value){
if (is.na(value)) {
temp <- is.na(x)
}
else {
temp <- (x == value)
}
temp %>%
data.frame() %>%
rowid_to_column(var = "X") %>%
gather(key = "Y", value = "Z", -1) %>%
ggplot(aes(x = X,
y = Y,
fill = Z)) +
geom_tile() +
labs(x = "Missing Position",
y = "Variables",
title = "Missing Value Mapping") +
theme(panel.background = element_blank(),
legend.position = "top",
plot.title = element_text(hjust = 0.5))
}
## Manage too many 0 values
### In column
colZero <- colSums(Variable == 0) / nrow(Variable) %>%
data.frame(Data = .)
(colSums(Variable == 0) / nrow(Variable)) %>% order()
colZero <- data.frame(Data = colZero[order(colZero,decreasing = T),],
row.names = rownames(colZero)[order(colZero,decreasing = T)])
colZero
(colSums(Variable == 0) / nrow(Variable)) %>% order()
## Manage too many 0 values
### In column
colZero <- colSums(Variable == 0) / nrow(Variable) %>%
data.frame(Data = .)
colZero
## Manage too many 0 values
### In column
colZero <- colSums(Variable == 0) / nrow(Variable) %>%
data.frame(Data = .)
colZero
(colSums(Variable == 0) / nrow(Variable)) %>% order()
## Manage too many 0 values
### In column
colZero <- (colSums(Variable == 0) / nrow(Variable)) %>%
data.frame(Data = .)
(colSums(Variable == 0) / nrow(Variable)) %>% order()
colZero
(colSums(Variable == 0) / nrow(Variable)) %>% order()
(colSums(Variable == 0) / nrow(Variable)) %>% order()
(colSums(Variable == 0) / nrow(Variable)) %>% order(decreasing = T)
(colSums(Variable == 0) / nrow(Variable)) %>%
order(decreasing = T) %>%
data.frame(Data = .)
(colSums(Variable == 0) / nrow(Variable)) %>%
data.frame(Data = .[order(.),])
(colSums(Variable == 0) / nrow(Variable)) %>%
data.frame(Data = .)
(colSums(Variable == 0) / nrow(Variable)) %>%
data.frame(Data = ., row.names = .)
(colSums(Variable == 0) / nrow(Variable)) %>%
data.frame(Data = .)
(colSums(Variable == 0) / nrow(Variable)) %>%
order(decreasing = T)
order(decreasing = T) %>%
data.frame(Data = .)
(colSums(Variable == 0) / nrow(Variable)) %>%
order(decreasing = T)
(colSums(Variable == 0) / nrow(Variable)) %>%
.[order(decreasing = T)]
(colSums(Variable == 0) / nrow(Variable)) %>%
.[order(decreasing = T),]
(colSums(Variable == 0) / nrow(Variable)) %>%
.$[order(decreasing = T)]
(colSums(Variable == 0) / nrow(Variable)) %>%
[order(decreasing = T)]
(colSums(Variable == 0) / nrow(Variable)) %>%
order(decreasing = T)
## Manage too many 0 values
### In column
colZero <- (colSums(Variable == 0) / nrow(Variable)) %>%
data.frame(Data = .)
colZero <- data.frame(Data = colZero[order(colZero,decreasing = T),],
row.names = rownames(colZero)[order(colZero,decreasing = T)])
colZero
### WCC RLA and EFF is possible to be zero during off operation. Drop Variable1 and Variable2
which(names(Variable) %in% c("Variable_2", "Variable_1"))
head(Variable)
colZero
### WCC RLA and EFF is possible to be zero during off operation. Drop Variable1 and Variable2
which(names(Variable) %in% c("Variable_2", "Variable_1"))
### WCC RLA and EFF is possible to be zero during off operation. Drop Variable1 and Variable2
-which(names(Variable) %in% c("Variable_2", "Variable_1"))
head(Variable[-which(names(Variable) %in% c("Variable_2", "Variable_1"))])
Variable[-which(names(Variable) %in% c("Variable_2", "Variable_1"))]
Variable <- Variable[-which(names(Variable) %in% c("Variable_2", "Variable_1"))]
### In rows
rowZero <- boxplot.stats(rowSums(Variable == 0))
mapZero <- valplot(Variable, 0)+
geom_vline(xintercept = c(which(Variable$Time == ymd_hms(20160101000000)),
which(Variable$Time == ymd_hms(20170101000000)),
which(Variable$Time == ymd_hms(20180101000000))))
mapZero
deletedRows <- sum(rowSums(Variable == 0) > rowZero$stats[5]) / nrow(Variable)
rowZero
deletedRows <- sum(rowSums(Variable == 0) > rowZero$stats[5]) / nrow(Variable)
deletedRows
deletedRows <- sum(rowSums(Variable == 0) > 7) / nrow(Variable)
deletedRows
deletedRows <- sum(rowSums(Variable == 0) > 8) / nrow(Variable)
deletedRows
deletedRows <- sum(rowSums(Variable == 0) > rowZero$stats[5]+1) / nrow(Variable)
deletedRows
deletedRows <- sum(rowSums(Variable == 0) > rowZero$stats[5]+1) / nrow(Variable)
deletedRows
rowZero
deletedRows <- sum(rowSums(Variable == 0) > rowZero$stats[5]+1) / nrow(Variable)
deletedRows
sum(rowSums(Variable == 0) > rowZero$stats[5]+1) / nrow(Variable)
# Check total rows to delete
# sum(rowSums(Variable == 0) > rowZero$stats[5]+1) / nrow(Variable)
(rowSums(Variable == 0) > rowZero$stats[5]+1)
# Check total rows to delete
# sum(rowSums(Variable == 0) > rowZero$stats[5]+1) / nrow(Variable)
Variable[(rowSums(Variable == 0) > rowZero$stats[5]+1),]
## Delete rows with
Variable <- Variable[-which(rowSums(Variable == 0) > rowZero$stats[5]),]
valplot(Variable, 0)+
geom_vline(xintercept = c(which(Variable$Time == ymd_hms(20160101000000)),
which(Variable$Time == ymd_hms(20170101000000)),
which(Variable$Time == ymd_hms(20180101000000))))
## Explore operational outlier
### Visualize total outliers
OP_var <- names(Variable[-which(names(Variable) %in% OA_var)])
a <- c()
for (x in 1:length(OP_var)) {
a[x] <- length(boxplot.stats(Variable[[OP_var[x]]])$out)
}
OP_outliers <- data.frame(OP_var= OP_var,
OutlierPercent = round(a/nrow(Variable)*100, 1))
OP_outliersPlot <- ggplot(OP_outliers, aes(x = OP_var, y = OutlierPercent)) +
geom_col() +
labs(y = "Outlier Percentage [%]",
title = "Operational Data Outlier Proportion") +
coord_flip() +
scale_y_continuous(expand = c(0,0), limits = c(0,15), breaks = seq(0,15,3)) +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
panel.grid.major.x = element_line(colour = "grey"),
plot.title = element_text(hjust = 0.5, margin=margin(0,0,10,0)))
OP_outliersPlot
VarSkew <- data.frame(direct= abs(sapply(Variable[-1], skewness)),
logp1= abs(sapply(log1p(Variable[-1]), skewness)),
squared= abs(sapply((Variable[-1])**2, skewness)),
cubed= abs(sapply((Variable[-1])**3, skewness)))
normalized_method <- c()
for (x in 1:nrow(VarSkew)){
normalized_method[x] <- which.min(VarSkew[x,])
if (normalized_method[x] == 2) {
Variable[which(colnames(Variable) %in% rownames(VarSkew[x,]))] <- log1p(Variable[which(colnames(Variable) %in% rownames(VarSkew[x,]))])
}
if (normalized_method[x] == 3) {
Variable[which(colnames(Variable) %in% rownames(VarSkew[x,]))] <- Variable[which(colnames(Variable) %in% rownames(VarSkew[x,]))] ** 2
}
if (normalized_method[x] == 4) {
Variable[which(colnames(Variable) %in% rownames(VarSkew[x,]))] <- Variable[which(colnames(Variable) %in% rownames(VarSkew[x,]))] ** 3
}
}
normalized_method
## Standardization
Variable[-1] <- scale(Variable[-1])
## Standardization
Variable[which(names(Variable) %in% c("Total_RLA", "Time"))]
## Standardization
Variable[-which(names(Variable) %in% c("Total_RLA", "Time"))]
## Standardization
Variable[-which(names(Variable) %in% c("Total_RLA", "Time"))] <- scale(Variable[-which(names(Variable) %in% c("Total_RLA", "Time"))])
